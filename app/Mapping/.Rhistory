install.packages("shiny")
library(shiny)
})
})
library(nycflights13)
data(nycflights13)
install.packages("nycflights13")
library(nycflights13)
filter(flights, month == 1, day == 1)
attach(nycflights13)
attach(nycflights13)
data(nycflights13)
head(flights)
attach(flights)
filter(flights, month == 1, day == 1)
filter(flights, month == 1, day == 1)
filter(flights, month == 1)
library(dplyr)
filter(flights, month == 1, day == 1)
filter(flights, month == 1 | month == 2)
fix(filter(flights, month == 1 | month == 2))
arrange(flights, month,year,  day)
arrange(flights, month,year,day)
arrange(flights, dep_time, month,year,day)
shiny::runApp('Data Science/APP')
runApp('Data Science/APP')
runApp('Data Science/APP')
runApp('Data Science/APP')
runApp('Data Science/APP')
runApp('Data Science/APP')
runApp('Data Science/APP')
runApp('Data Science/APP')
shiny::runApp('C:/Users/Jackie/Desktop/Fall2016-Proj2-grp7/app/Mapping')
runApp('C:/Users/Jackie/Desktop/Fall2016-Proj2-grp7/app/Mapping')
??selectInput
runApp('C:/Users/Jackie/Desktop/Fall2016-Proj2-grp7/app/Mapping')
library("RJSONIO")
library(RJSONIO)
getwd()
setwd("C:\\Users\\Jackie\\Desktop\\Fall2016-Proj2-grp7\\app\\Mapping")
run  = read.csv("test.csv")
reverseGeoCode <- function(latlng){
latlngStr <-  gsub("‘,’%20’", paste(latlng, collapse=","))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
address = reverseGeoCode(c(run$lat,run$long))
address = reverseGeoCode(run$lat,run$long)
attach(run)
address = reverseGeoCode(lat,long)
address = reverseGeoCode(c(lat,long)
)
reverseGeoCode <- function(latlng){
latlngStr <-  gsub("‘,’%20’", paste(latlng, collapse=""))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
address = reverseGeoCode(c(lat,long))
address = reverseGeoCode(lat,long)
attach(run)
address = reverseGeoCode(lat,long)
??paste
?paste
address = reverseGeoCode(run[,c(1:2)])
address = reverseGeoCode(run[1,c(1:2)])
address = reverseGeoCode(run[1,1:2])
run[1,1:2]
address = reverseGeoCode(c(run[1,1:2]))
c(run[1,1:2])
c(37.4418834, -122.1430195)
rrr<- run[-1,]
head(rrr,5)
run  = read.csv("test.csv",header = FALSE)
address = reverseGeoCode(c(run[1,1:2]))
c(run[1,1:2])
run  = read.csv("test.csv",header = FALSE)
head(run,5)
rrr<- run[-1,]
address = reverseGeoCode(c(rrr[1,1:2]))
c(rrr[1,1:2])
read_matrix <- function (csvfile) {
a <- read.csv(csvfile, header=FALSE)
matrix(as.matrix(a), ncol=ncol(a), dimnames=NULL)
}
rrr<- read_matrix(test.csv)
rrr<- read_matrix("test.csv")
address = reverseGeoCode(c(rrr[1,1:2]))
c(rrr[1,1:2]
)
address = reverseGeoCode(c(rrr[2,1:2]))
c(rrr[2,1:2])
c(37.4418834, -122.1430195)
address = reverseGeoCode(c(as.vector(rrr[2,1:2])))
c(as.vector(rrr[2,1:2]))
c(as.numeric(rrr[2,1:2]))
address = reverseGeoCode(c(as.numeric(rrr[2,1:2])))
address = reverseGeoCode(c(37.4418834, -122.1430195))
reverseGeoCode <- function(latlng){
latlngStr <-  gsub('','%20', paste(latlng, collapse=""))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
address = reverseGeoCode(c(37.4418834, -122.1430195))
reverseGeoCode(c(as.numeric(rrr[2,1:2])))
reverseGeoCode <- function(latlng){
latlngStr <-  gsub('','%20', paste(latlng, collapse=""))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
reverseGeoCode <- function(latlng){
latlngStr <-  gsub('','%20', paste(latlng, collapse=","))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
address = reverseGeoCode(c(37.4418834, -122.1430195))
address <- data.json["results.formatted_address"]
data.json <- unlist(data.json)
data.json <- fromJSON(paste(readLines(con), collapse=""))
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
reverseGeoCode <-function(latlng){
latlngstr<-gsub("","%20",paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json"results.formatted_address"]
return(address)
}
reverseGeoCode <-function(latlng){
latlngstr<-gsub("","%20",paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
reverseGeoCode <-function(latlng){
latlngstr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
reverseGeoCode <-function(latlng){
latlngstr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
reverseGeoCode <- function(latlng){
latlngStr <-  gsub('','%20', paste(latlng, collapse=","))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json <- fromJSON(paste(readLines(con), collapse=""))
close(con)
#Flatten the received JSON
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
latlng = c(37.4418834, -122.1430195)
latlngstr<-gsub('','%20',paste(latlng,collapse = ","))
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
reverseGeoCode <-function(latlng){
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
reverseGeoCode <-function(latlng){
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/api/geocode/json?sensor=false&latlng=',latlngStr,sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
reverseGeoCode <-function(latlng){
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=',latlngStr, sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
reverseGeoCode <-function(latlng){
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=',latlngStr, sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
address <- data.json["results.formatted_address"]
return(address)
}
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=',latlngStr, sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]="OK")
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
reverseGeoCode <-function(latlng){
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=',latlngStr, sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
address = reverseGeoCode(c(37.4418834, -122.1430195))
address <- data.json["results.formatted_address"]
address <- reverseGeoCode(c(37.4418834, -122.1430195))
reverseGeoCode <-function(latlng){
latlngStr<-gsub('','%20',paste(latlng,collapse = ","))
library("RJSONIO")
connectStr <- paste('http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=',latlngStr, sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
return(address)
}
address <- reverseGeoCode(c(37.4418834, -122.1430195))
address
latlng = c(37.4418834, -122.1430195)
latlngStr <-  gsub('','%20', paste(latlng, collapse=","))#Collapse and Encode URL Parameters
library(RJSONIO) #Load Library
#Open Connection
connectStr <- paste("http://maps.google.com/maps/api/geocode/json?sensor=false&latlng=",latlngStr, sep="")
con <- url(connectStr)
data.json<-fromJSON(paste(readLines(con),collapse = ""))
close(con)
data.json <- unlist(data.json)
if(data.json["status"]=="OK")
address <- data.json["results.formatted_address"]
address
library(ggmap)
uuu  = read.csv("test.csv")
library(ggmap)
res = mapply(FUN = function(lon,lat){
revegeocode(c(lon,lat),output="more")
},
uuu$long, uuu$lat
)
res = mapply(FUN = function(lon,lat){
revgeocode(c(lon,lat),output="more")
},
uuu$long, uuu$lat
)
cbind(uuu, data.table::rbindlist(res,fill=TRUE))
library(data.table)
install.packages("data.table")
library(data.table)
cbind(uuu, data.table::rbindlist(res,fill=TRUE))
ttt = cbind(uuu, data.table::rbindlist(res,fill=TRUE))
head(ttt,5)
fix(ttt)
run = cbind(uuu, data.table::rbindlist(res,fill=TRUE))
runApp()
run = cbind(uuu, data.table::rbindlist(res,fill=TRUE))
runApp()
fix(ttt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
